Index: squid/src/client_side.c
diff -c squid/src/client_side.c:1.561.2.54 squid/src/client_side.c:1.561.2.55
*** squid/src/client_side.c:1.561.2.54	Wed Feb 18 11:51:16 2004
--- squid/src/client_side.c	Mon May 31 16:57:09 2004
***************
*** 3386,3391 ****
--- 3386,3392 ----
  {
      int *N = &incoming_sockets_accepted;
      int fd = -1;
+     fde *F;
      ConnStateData *connState = NULL;
      struct sockaddr_in peer;
      struct sockaddr_in me;
***************
*** 3403,3409 ****
  		    sock, xstrerror());
  	    break;
  	}
! 	debug(33, 4) ("httpAccept: FD %d: accepted\n", fd);
  	connState = cbdataAlloc(ConnStateData);
  	connState->peer = peer;
  	connState->log_addr = peer.sin_addr;
--- 3404,3411 ----
  		    sock, xstrerror());
  	    break;
  	}
! 	F = &fd_table[fd];
! 	debug(33, 4) ("httpAccept: FD %d: accepted port %d client %s:%d\n", fd, F->local_port, F->ipaddr, F->remote_port);
  	connState = cbdataAlloc(ConnStateData);
  	connState->peer = peer;
  	connState->log_addr = peer.sin_addr;
***************
*** 3488,3493 ****
--- 3490,3496 ----
      https_port_data *https_port = data;
      SSL_CTX *sslContext = https_port->sslContext;
      int fd = -1;
+     fde *F;
      ConnStateData *connState = NULL;
      struct sockaddr_in peer;
      struct sockaddr_in me;
***************
*** 3514,3523 ****
  	    break;
  	}
  	SSL_set_fd(ssl, fd);
! 	fd_table[fd].ssl = ssl;
! 	fd_table[fd].read_method = &ssl_read_method;
! 	fd_table[fd].write_method = &ssl_write_method;
! 	debug(50, 5) ("httpsAccept: FD %d accepted, starting SSL negotiation.\n", fd);
  
  	connState = cbdataAlloc(ConnStateData);
  	connState->peer = peer;
--- 3517,3528 ----
  	    break;
  	}
  	SSL_set_fd(ssl, fd);
! 	F = &fd_table[fd];
! 	F->ssl = ssl;
! 	F->read_method = &ssl_read_method;
! 	F->write_method = &ssl_write_method;
! 	debug(33, 4) ("httpsAccept: FD %d: accepted port %d client %s:%d\n", fd, F->local_port, F->ipaddr, F->remote_port);
! 	debug(50, 5) ("httpsAccept: FD %d: starting SSL negotiation.\n", fd);
  
  	connState = cbdataAlloc(ConnStateData);
  	connState->peer = peer;
